input = DATA.read.chomp.split("\n")

def on_after(input, iterations = 5)
  patterns = input.map{|l| l.split(" => ") }.to_h
  grid = ".#./..#/###"

  iterations.times do |i|
    grid_size = grid.split("/").size

    if (grid_size % 2).zero?
      # split into 2x2 blocks
      squares = grid.split("/").each_slice(2).map do |t, b|
        t.chars.each_slice(2).zip(b.chars.each_slice(2))
      end.flatten(1)

      # enhance via 2x2 rules
      squares.map! do |s|
        possibles = [s, s.reverse]
        3.times do |i|
          possibles.push(possibles[-2].transpose.map(&:reverse))
          possibles.push(possibles[-1].reverse)
        end
        possibles.map!{|s| s.map(&:join).join("/") }
        possibles.uniq!
        match = possibles.find{|s| patterns.has_key?(s) }
        patterns[match]
      end

      width = grid_size / 2
      grid = squares.each_slice(width).map do |s|
        s.map{|l| l.split("/") }.transpose.map(&:join)
      end.join("/")
    else
      # split into 3x3 blocks
      squares = grid.split("/").each_slice(3).map do |t, m, b|
        t.chars.each_slice(3).zip(m.chars.each_slice(3), b.chars.each_slice(3))
      end.flatten(1)

      # enhance via 3x3 rules
      squares.map! do |s|
        possibles = [s, s.reverse]
        3.times do |i|
          possibles.push(possibles[-2].transpose.map(&:reverse))
          possibles.push(possibles[-1].reverse)
        end
        possibles.map!{|s| s.map(&:join).join("/") }
        possibles.uniq!
        match = possibles.find{|s| patterns.has_key?(s) }
        patterns[match]
      end

      width = grid_size / 3
      grid = squares.each_slice(width).map do |s|
        s.map{|l| l.split("/") }.transpose.map(&:join)
      end.join("/")
    end
  end

  grid.count("#")
end

testcase = <<-END.chomp.split("\n")
../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#
END

puts "part 1"
raise "oh no" unless on_after(testcase, 2) == 12
p on_after(input)

puts "part 2"
p on_after(input, 18)


__END__
../.. => .../#.#/...
#./.. => ..#/..#/#..
##/.. => .../#../..#
.#/#. => #../.../...
##/#. => #.#/.#./#..
##/## => ..#/#.#/..#
.../.../... => .#../#..#/#.../.#..
#../.../... => ..##/..##/.#.#/....
.#./.../... => ..##/..##/.###/##..
##./.../... => ..../.##./#.##/..#.
#.#/.../... => ####/#.##/#.##/#.#.
###/.../... => #..#/..#./..../##.#
.#./#../... => ..#./.#../...#/#.##
##./#../... => ..../#.##/#..#/.#..
..#/#../... => ##.#/####/###./###.
#.#/#../... => ..../#.##/.###/#.#.
.##/#../... => ..#./##.#/####/..##
###/#../... => ..#./.##./...#/..#.
.../.#./... => .###/#.../.#../####
#../.#./... => ###./.#.#/#.##/##.#
.#./.#./... => ..##/..#./###./..#.
##./.#./... => #..#/..#./###./...#
#.#/.#./... => #.../##.#/#.##/#..#
###/.#./... => ...#/#..#/####/##.#
.#./##./... => #.##/#.##/..../#.#.
##./##./... => ..##/###./..#./####
..#/##./... => ..../##../##.#/.##.
#.#/##./... => ##../####/####/.#.#
.##/##./... => ..../##.#/.###/##..
###/##./... => .#../#.#./.#../..##
.../#.#/... => ####/#.#./..##/#..#
#../#.#/... => .#../.#../#..#/....
.#./#.#/... => ..##/.##./####/#.#.
##./#.#/... => ..#./###./.#../....
#.#/#.#/... => ..#./..#./...#/#...
###/#.#/... => ###./.#../##../####
.../###/... => #.##/####/####/..##
#../###/... => .#.#/...#/###./...#
.#./###/... => ..../.#.#/.#../....
##./###/... => ...#/.###/..../.##.
#.#/###/... => ..##/###./.#../#..#
###/###/... => .###/..#./..#./.###
..#/.../#.. => .##./###./####/#.#.
#.#/.../#.. => ####/#.../#.../..##
.##/.../#.. => ###./#..#/..#./.#..
###/.../#.. => .###/.##./#.#./.###
.##/#../#.. => ##.#/...#/.#.#/...#
###/#../#.. => #.##/..#./..../#..#
..#/.#./#.. => #..#/##.#/.##./####
#.#/.#./#.. => ###./..##/#..#/#..#
.##/.#./#.. => .#../..../...#/...#
###/.#./#.. => .#../##../.###/..#.
.##/##./#.. => ##../..##/##../##.#
###/##./#.. => #.##/#..#/.###/####
#../..#/#.. => ##.#/####/#.../..##
.#./..#/#.. => #..#/..../..../###.
##./..#/#.. => #..#/##.#/##.#/#.#.
#.#/..#/#.. => .###/##.#/####/#...
.##/..#/#.. => ####/.##./...#/#..#
###/..#/#.. => .#.#/####/##.#/...#
#../#.#/#.. => ..##/.##./..##/##..
.#./#.#/#.. => #.../##../..##/..#.
##./#.#/#.. => ...#/##.#/#..#/.#..
..#/#.#/#.. => #.#./##../#.##/###.
#.#/#.#/#.. => ##../##.#/#.#./....
.##/#.#/#.. => ####/...#/####/.#..
###/#.#/#.. => ..../.#../.#../....
#../.##/#.. => .#.#/..#./#..#/.###
.#./.##/#.. => #.../.#.#/.###/.##.
##./.##/#.. => #.#./#.#./.#../###.
#.#/.##/#.. => ####/##../.##./####
.##/.##/#.. => #.../#.#./#.##/###.
###/.##/#.. => ####/####/..../####
#../###/#.. => ####/.##./...#/##.#
.#./###/#.. => .#../#.##/#..#/..##
##./###/#.. => #.#./..##/#.../..##
..#/###/#.. => #.##/.###/#.#./###.
#.#/###/#.. => #.##/#.##/..../#..#
.##/###/#.. => .##./#.#./..##/####
###/###/#.. => .##./#..#/#.../###.
.#./#.#/.#. => #.#./#..#/#..#/##.#
##./#.#/.#. => ...#/#.#./##.#/###.
#.#/#.#/.#. => ##.#/..##/##.#/#.##
###/#.#/.#. => .#.#/..#./##../.##.
.#./###/.#. => #..#/..#./..##/#...
##./###/.#. => ####/.#.#/####/..#.
#.#/###/.#. => #.#./..##/##../#..#
###/###/.#. => ...#/..../..../#.#.
#.#/..#/##. => ..#./.##./###./.#.#
###/..#/##. => #.../###./...#/####
.##/#.#/##. => ..../..../.###/##..
###/#.#/##. => ##../..../#.#./.##.
#.#/.##/##. => .#.#/##../..##/#.#.
###/.##/##. => ###./####/...#/.#..
.##/###/##. => ..##/#.../..##/.#.#
###/###/##. => ..##/...#/.###/.#..
#.#/.../#.# => ..##/#.../##.#/....
###/.../#.# => #.##/#..#/..../##..
###/#../#.# => #.../..../##.#/..#.
#.#/.#./#.# => ###./..##/.#../.##.
###/.#./#.# => ..../#..#/.###/#..#
###/##./#.# => .#.#/###./##.#/.###
#.#/#.#/#.# => ..../..../.##./#..#
###/#.#/#.# => .###/.#.#/...#/.###
#.#/###/#.# => .#.#/##../.#../.#..
###/###/#.# => .#.#/.##./#.##/....
###/#.#/### => ..#./..#./..#./..##
###/###/### => ##.#/..##/.#.#/....
